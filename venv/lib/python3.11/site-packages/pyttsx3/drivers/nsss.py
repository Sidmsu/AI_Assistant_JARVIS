from Foundation import *
from AppKit import NSSpeechSynthesizer
from PyObjCTools import AppHelper
import objc
from ..voice import Voice

# Define the keys for the voice attributes
NSSpeechSynthesizerVoiceIdentifier = "VoiceIdentifier"
NSSpeechSynthesizerVoiceName = "VoiceName"
NSSpeechSynthesizerVoiceLanguage = "VoiceLocaleIdentifier"

def buildDriver(proxy):
    return NSSpeechDriver.alloc().initWithProxy_(proxy)

class NSSpeechDriver(NSObject):
    @objc.python_method
    def initWithProxy_(self, proxy):
        self = objc.super(NSSpeechDriver, self).init()
        if self:
            self._proxy = proxy
            self._tts = NSSpeechSynthesizer.alloc().initWithVoice_(None)
            self._tts.setDelegate_(self)
            # default rate
            self._tts.setRate_(200)
            self._completed = True
        return self

    @objc.python_method
    def destroy(self):
        self._tts.setDelegate_(None)
        del self._tts

    def speechSynthesizer_didFinishSpeaking_(self, tts, finishedSpeaking):
        self._completed = True
        AppHelper.callLater(0, self._proxy.notify, 'finished-speaking')

    @objc.python_method
    def start(self, text):
        self._completed = False
        self._tts.startSpeakingString_(text)

    @objc.python_method
    def stop(self):
        self._tts.stopSpeaking()
        self._completed = True

    @objc.python_method
    def isBusy(self):
        return not self._completed

    @objc.python_method
    def getProperty(self, name):
        if name == 'rate':
            return self._tts.rate()
        elif name == 'volume':
            return self._tts.volume()
        elif name == 'voice':
            return self._tts.voice().identifier()
        elif name == 'voices':
            return self._availableVoices()
        else:
            raise KeyError('unknown property name %s' % name)

    @objc.python_method
    def setProperty(self, name, value):
        if name == 'rate':
            self._tts.setRate_(value)
        elif name == 'volume':
            self._tts.setVolume_(value)
        elif name == 'voice':
            self._tts.setVoice_(NSSpeechSynthesizer.voiceWithIdentifier_(value))
        else:
            raise KeyError('unknown property name %s' % name)

    @objc.python_method
    def _availableVoices(self):
        voices = []
        for voice in NSSpeechSynthesizer.availableVoices():
            voiceAttrs = NSSpeechSynthesizer.attributesForVoice_(voice)
            voices.append(Voice(voice, voiceAttrs[NSSpeechSynthesizerVoiceIdentifier], voiceAttrs[NSSpeechSynthesizerVoiceName], voiceAttrs[NSSpeechSynthesizerVoiceLanguage]))
        return voices

    @objc.python_method
    def say(self, text):
        self.start(text)

    @objc.python_method
    def startLoop(self):
        AppHelper.runConsoleEventLoop()